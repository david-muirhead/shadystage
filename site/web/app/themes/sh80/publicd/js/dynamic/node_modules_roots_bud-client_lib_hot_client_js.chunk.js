"use strict";
(self["webpackChunk_roots_bud_sage_sage"] = self["webpackChunk_roots_bud_sage_sage"] || []).push([["node_modules_roots_bud-client_lib_hot_client_js"],{

/***/ "../node_modules/@roots/bud-client/lib/hot/client.js":
/*!***********************************************************!*\
  !*** ../node_modules/@roots/bud-client/lib/hot/client.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "client": () => (/* binding */ client)
/* harmony export */ });
/* harmony import */ var _components_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/index.js */ "../node_modules/@roots/bud-client/lib/hot/components/index.js");
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./events.js */ "../node_modules/@roots/bud-client/lib/hot/events.js");
/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./log.js */ "../node_modules/@roots/bud-client/lib/hot/log.js");
/* harmony import */ var _options_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./options.js */ "../node_modules/@roots/bud-client/lib/hot/options.js");
/* eslint-disable no-console */
/* global __resourceQuery */
/* global __webpack_hash__ */
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




/**
 * Initializes bud.js HMR handling
 */
const client = (queryString, webpackHot) => __awaiter(void 0, void 0, void 0, function* () {
    /* Guard: EventSource browser support */
    if (typeof (window === null || window === void 0 ? void 0 : window.EventSource) === `undefined`) {
        console.error(`[bud] hot module reload requires EventSource to work. https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events#Tools`);
        return false;
    }
    /* Guard: webpackHot api availability */
    if (!webpackHot) {
        console.error(`[bud] hot module reload requires the webpack hot api to be available`);
        return false;
    }
    /* Set client options from URL params */
    const options = _options_js__WEBPACK_IMPORTED_MODULE_3__.setFromParameters(queryString);
    /* Setup logger */
    const logger = (0,_log_js__WEBPACK_IMPORTED_MODULE_2__.makeLogger)(options);
    if (typeof window.bud === `undefined`) {
        window.bud = {
            current: {},
            hmr: {},
            controllers: [],
            listeners: {},
        };
    }
    if (!window.bud.current[options.name]) {
        window.bud.current[options.name] = null;
    }
    const isStale = (hash) => {
        if (hash)
            window.bud.current[options.name] = hash;
        return __webpack_require__.h() === window.bud.current[options.name];
    };
    /**
     * Webpack HMR check handler
     */
    const check = () => __awaiter(void 0, void 0, void 0, function* () {
        if (webpackHot.status() === `idle`) {
            yield webpackHot.check(false);
            requestAnimationFrame(function whenReady() {
                return __awaiter(this, void 0, void 0, function* () {
                    if (webpackHot.status() === `ready`) {
                        yield update();
                    }
                    else {
                        requestAnimationFrame(whenReady);
                    }
                });
            });
        }
    });
    /**
     * Webpack HMR unaccepted module handler
     */
    const onUnacceptedOrDeclined = (info) => {
        console.warn(`[${options.name}] ${info.type}`, info);
        options.reload && window.location.reload();
    };
    /**
     * Webpack HMR error handler
     */
    const onErrored = (error) => {
        window.bud.controllers.map(controller => controller === null || controller === void 0 ? void 0 : controller.update({
            errors: [error],
        }));
    };
    /**
     * Webpack HMR update handler
     */
    const update = () => __awaiter(void 0, void 0, void 0, function* () {
        try {
            yield webpackHot.apply({
                ignoreUnaccepted: true,
                ignoreDeclined: true,
                ignoreErrored: true,
                onErrored,
                onUnaccepted: onUnacceptedOrDeclined,
                onDeclined: onUnacceptedOrDeclined,
            });
            if (!isStale())
                yield check();
        }
        catch (error) {
            logger.error(error);
        }
    });
    /* Instantiate indicator, overlay */
    yield _components_index_js__WEBPACK_IMPORTED_MODULE_0__.make(options);
    /* Instantiate eventSource */
    const events = (0,_events_js__WEBPACK_IMPORTED_MODULE_1__.injectEvents)(EventSource).make(options);
    if (!window.bud.listeners[options.name]) {
        window.bud.listeners[options.name] = (payload) => __awaiter(void 0, void 0, void 0, function* () {
            var _a;
            if (!payload)
                return;
            if (options.reload && payload.action === `reload`)
                return window.location.reload();
            if (payload.name !== options.name)
                return;
            window.bud.controllers.map(controller => controller === null || controller === void 0 ? void 0 : controller.update(payload));
            if (((_a = payload.errors) === null || _a === void 0 ? void 0 : _a.length) > 0)
                return;
            if (payload.action === `built` || payload.action === `sync`) {
                if (isStale(payload.hash))
                    return;
                if (payload.action === `built`) {
                    logger.log(`built in ${payload.time}ms`);
                }
                yield check();
            }
        });
        /*
         * Instantiate HMR event source
         * and register client listeners
         */
        events.addListener(window.bud.listeners[options.name]);
    }
});


/***/ }),

/***/ "../node_modules/@roots/bud-client/lib/hot/components/index.js":
/*!*********************************************************************!*\
  !*** ../node_modules/@roots/bud-client/lib/hot/components/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "make": () => (/* binding */ make)
/* harmony export */ });
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const make = (options) => __awaiter(void 0, void 0, void 0, function* () {
    if (options.indicator && !customElements.get(`bud-activity-indicator`)) {
        yield __webpack_require__.e(/*! import() */ "node_modules_roots_bud-client_lib_hot_components_indicator_index_js").then(__webpack_require__.bind(__webpack_require__, /*! ./indicator/index.js */ "../node_modules/@roots/bud-client/lib/hot/components/indicator/index.js"))
            .then(makeController)
            .then(maybePushController);
    }
    if (options.overlay && !customElements.get(`bud-error`)) {
        yield __webpack_require__.e(/*! import() */ "node_modules_roots_bud-client_lib_hot_components_overlay_index_js").then(__webpack_require__.bind(__webpack_require__, /*! ./overlay/index.js */ "../node_modules/@roots/bud-client/lib/hot/components/overlay/index.js"))
            .then(makeController)
            .then(maybePushController);
    }
    return window.bud.controllers;
});
const makeController = (module) => __awaiter(void 0, void 0, void 0, function* () {
    if (!module)
        return;
    return yield module.make();
});
const maybePushController = (controller) => {
    if (!controller)
        return;
    window.bud.controllers.push(controller);
};


/***/ }),

/***/ "../node_modules/@roots/bud-client/lib/hot/events.js":
/*!***********************************************************!*\
  !*** ../node_modules/@roots/bud-client/lib/hot/events.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "injectEvents": () => (/* binding */ injectEvents)
/* harmony export */ });
/* eslint-disable no-console */
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const injectEvents = (eventSource) => {
    /**
     * EventSource wrapper
     *
     * @remarks
     * wraps EventSource in a function to allow for
     * mocking in tests
     */
    return class Events extends eventSource {
        /**
         * Class constructor
         *
         * @remarks
         * Singleton interface, so this is private.
         *
         * @public
         */
        constructor(options) {
            super(options.path);
            this.options = options;
            /**
             * Registered listeners
             *
             * @public
             */
            this.listeners = new Set();
            /**
             * EventSource `onopen` handler
             * @public
             */
            this.onopen = function () { };
            /**
             * EventSource `onmessage` handler
             * @public
             */
            this.onmessage = function (payload) {
                return __awaiter(this, void 0, void 0, function* () {
                    if (!(payload === null || payload === void 0 ? void 0 : payload.data) || payload.data == `\uD83D\uDC93`) {
                        return;
                    }
                    try {
                        const data = JSON.parse(payload.data);
                        if (!data)
                            return;
                        yield Promise.all([...this.listeners].map((listener) => __awaiter(this, void 0, void 0, function* () {
                            return yield listener(data);
                        })));
                    }
                    catch (ex) { }
                });
            };
            this.onopen = this.onopen.bind(this);
            this.onmessage = this.onmessage.bind(this);
            this.addListener = this.addListener.bind(this);
        }
        /**
         * Singleton constructor
         *
         * @public
         */
        static make(options) {
            if (typeof window.bud.hmr[options.name] === `undefined`)
                Object.assign(window.bud.hmr, {
                    [options.name]: new Events(options),
                });
            return window.bud.hmr[options.name];
        }
        /**
         * EventSource `addMessageListener` handler
         * @public
         */
        addListener(listener) {
            this.listeners.add(listener);
            return this;
        }
    };
};


/***/ }),

/***/ "../node_modules/@roots/bud-client/lib/hot/log.js":
/*!********************************************************!*\
  !*** ../node_modules/@roots/bud-client/lib/hot/log.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "makeError": () => (/* binding */ makeError),
/* harmony export */   "makeInfo": () => (/* binding */ makeInfo),
/* harmony export */   "makeLog": () => (/* binding */ makeLog),
/* harmony export */   "makeLogger": () => (/* binding */ makeLogger),
/* harmony export */   "makeWarn": () => (/* binding */ makeWarn)
/* harmony export */ });
/* eslint-disable no-console */
const makeLogger = (options) => {
    return {
        log: makeLog(options),
        error: makeError(options),
        warn: makeWarn(options),
        info: makeInfo(options),
    };
};
let lastLog = null;
const makeLog = options => {
    return (...args) => {
        if (options.log) {
            if (lastLog === args.join(``))
                return;
            lastLog = args.join(``);
            console.log(`[${options.name}]`, ...args);
        }
    };
};
const makeInfo = options => {
    return (...args) => {
        if (options.log) {
            console.info(`[${options.name}]`, ...args);
        }
    };
};
const makeError = options => {
    return (...args) => {
        console.error(`[${options.name}]`, ...args);
    };
};
const makeWarn = options => {
    return (...args) => {
        console.warn(`[${options.name}]`, ...args);
    };
};


/***/ }),

/***/ "../node_modules/@roots/bud-client/lib/hot/options.js":
/*!************************************************************!*\
  !*** ../node_modules/@roots/bud-client/lib/hot/options.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "data": () => (/* binding */ data),
/* harmony export */   "get": () => (/* binding */ get),
/* harmony export */   "setFromParameters": () => (/* binding */ setFromParameters)
/* harmony export */ });
/**
 * Client options
 */
let data = {
    timeout: 2000,
    reload: true,
    name: `@roots/bud-client`,
    debug: true,
    log: true,
    indicator: true,
    overlay: true,
    path: `/bud/hot`,
};
/**
 * Get client option
 */
const get = (name, key) => key ? data[name][key] : data[name];
/**
 * Set client data based on URL parameters
 */
const setFromParameters = (query) => {
    let parsedParams = {};
    new window.URLSearchParams(query).forEach((value, key) => {
        parsedParams[key] =
            value === `true` ? true : value === `false` ? false : value;
    });
    data[parsedParams.name] = Object.assign(Object.assign({}, data), parsedParams);
    return data[parsedParams.name];
};



/***/ })

}]);
//# sourceMappingURL=node_modules_roots_bud-client_lib_hot_client_js.chunk.js.map